<?php
/*///////////////////////////////////////////////////////////
//
// Class Name: Twitter-Tweet-Loader
// Author: Naviland
// Url: https://github.com/NaviMaker/twitterLoader
// Last Update: 26/06/2014
// Description:
// This class allow you to easily retrieve a certain amount of tweets from a specific user trough the twitter API  1.1
//
// Documentation:
// http://navimaker.github.io/twitterLoader/
//
// This class make use of twitteroauth by abraham
// https://github.com/abraham/twitteroauth
//
////////////////////////////////////////////////////////////*/

require_once("twitteroauth/twitteroauth.php");

class TweetLoader
{
	//The user you want to load tweets
	public $username;
	//Iclude Retweets
	public $retweets = false;
	//Ignore Replies
	public $replies = false;
	
	//Oauth keys and access tokens you can get them registering your app here: https://apps.twitter.com/app/new
	public $consumerkey;
	public $consumersecret;
	public $accesstoken;
	public $accesstokensecret;
	
	//Maximum number of twitts to load
	public $tweetsLimit = 5;
	//Use dates like "1 minute ago"
	public $useAdvancedDates = true;
	//add html link to usernames (@) and hashtags (#)
	public $addHtmlLinks = true;
	//Output format: 0 PHP array, 1 XML, 2 JSON, 3 PLAIN TEXT, 4 HTML
	public $outputFormat = 4;
	//Enable cache for feeds, this procedure is highly recommended not to exceed the 150 request/hour limit
	public $useCache = true;
	//Cache file, if not existent it will be created
	public $cacheFile = "tweets.txt";
	//Time in seconds before refreshing the cache file, usually 1 minute is a good value
	public $cacheStoreTime = 60;
	
	//This variable will be filled with your tweets
	public $feed;
	//Store the API call
	public $connection;
	
	
	//Check if cache is enabled and if there is a valid cache file
	function cacheCheck()
	{
		if($this->useCache)
		{
			if(file_exists($this->cacheFile))
			{
				if(filemtime($this->cacheFile) > time() - $this->cacheStoreTime)
				{
					return true;
				}
			}
		}
		return false;
	}
	
	//Generate or update a valid cache file
	function cacheGenerate()
	{
		if($this->outputFormat == 0) // If the output is set on PHP array we need to serialize it in order to store it
		{
			if(file_put_contents($this->cacheFile, serialize($this->feed)))
			{
				return true;
			}
		}
		else
		{
			if(file_put_contents($this->cacheFile, $this->feed))
			{
				return true;
			}
		}
		return false;
	}
	
	// This function will modify the feed format according to the outputFormat variable
	function setOutput()
	{
		switch($this->outputFormat)
		{
			case 0: // PHP array
				//I don't think we have to do anything in this case
			break;
			case 1: // XML
				$xml="<?xml version=\"1.0\" encoding=\"UTF-8\"?><!--  Generated by twitterLoader  --><tweets>";
				foreach($this->feed as &$tweet)
				{
					$xml=$xml."<tweet><username>".$this->username."</username>";
					$xml=$xml."<text>".$tweet['created_at']."</text>";
					$xml=$xml."<retweet_count>".$tweet['retweet_count']."</retweet_count>";
					$xml=$xml."<favorite_count>".$tweet['favorite_count']."</favorite_count>";
					$xml=$xml."<created_at>".$tweet['created_at']."</created_at>";
					$xml=$xml."</tweet>";
				}
				$xml=$xml."</tweets>";
				$this->feed = $xml;
			break;
			case 2: // JSON
				$this->feed = json_encode($this->feed);
			break;
			case 3: // PLAIN TEXT
				$plainText="";
				foreach($this->feed as &$tweet)
				{
					$plainText=$plainText.$this->username." ( ".$tweet['created_at']." )\n";
					$plainText=$plainText.$tweet['text']."\n";
					$plainText=$plainText."\n\n";
				}
				$this->feed = $plainText;
			break;
			
			case 4: // HTML
				$html="<ul>";
				foreach($this->feed as &$tweet)
				{
					$html=$html."<li><strong>".$this->username."</strong> ( ".$tweet['created_at']." )<br/>";
					$html=$html.$tweet['text'];
					$html=$html."</li>";
				}
				$html=$html."</ul>";
				$this->feed = $html;
			break;
		}
	}
	
	//Open a new Oauth connection
	function openConnection()
	{
		return new TwitterOAuth($this->consumerkey, $this->consumersecret, $this->accesstoken, $this->accesstokensecret);
	}
	
	//With this function we will generate an array with the desired information extracted by the twitter API response. I have chosen to load only this 4 values but there are many other that ypu may want to read but you have to edit the setOutput function too.
	function formatTweets($tmp)
	{
		$this->feed=array();
		$i=0;
		foreach($tmp as &$t)
		{
			$this->feed[$i]=array(
				"text" => $this->addLinks($t->text),
				"retweet_count" => $t->retweet_count,
				"favorite_count" => $t->favorite_count,
				"created_at" => $this->formatDate($t->created_at),
			);
			$i++;
		}

	}
	
	//Add Links to hashtags, urls and usernames
	function addLinks($text)
	{
		$text = preg_replace("/((http)+(s)?:\/\/[^<>\s]+)/i", "<a href=\"\\0\" target=\"_blank\">\\0</a>", $text );
		$text = preg_replace("/[@]+([A-Za-z0-9-_]+)/", "<a href=\"http://twitter.com/\\1\" target=\"_blank\">\\0</a>", $text );
		$text = preg_replace("/[#]+([A-Za-z0-9-_]+)/", "<a href=\"http://twitter.com/search?q=%23\\1\" target=\"_blank\">\\0</a>", $text );
		return $text;
	}
	
	//Format Date according to the useAdvancedDates variable
	function formatDate($date)
	{
		$date = strtotime($date);
		$now = time();
		$delay = $now - $date;
		
		if( $delay < 60) //Till 60 seconds
		{
			$date = $delay." seconds ago";
		}
		elseif($delay >= 60 && $delay < 3600) //Till  60 minutes
		{
			$delay=floor($delay/60);
			if($delay > 1)
			{
				$date = $delay." minutes ago";
			}
			else
			{
				$date = $delay." minute ago";
			}
		}
		elseif($delay >= 3600 && $delay < 86400) //Till 24 hours
		{
			$delay=floor($delay/3600);
			if($delay > 1)
			{
				$date = $delay." hours ago";
			}
			else
			{
				$date = $delay." hour ago";
			}
		}
		else // More than a day
		{
			$date = date("d M Y h:s A",$date);
		}
		return $date;
	}
	
	//This the main function the only one that have to be called to retrieve tweets
	function loadFeed(){
		if($this->cacheCheck()) // If there is a valid cache file we will read it without opening a new connection
		{
			if($this->outputFormat == 0) // If outputFormat is set to PHP array we need to unserialize the content of the cache file
			{
				return $this->feed = unserialize(file_get_contents($this->cacheFile));
			}
			
			return $this->feed = file_get_contents($this->cacheFile);
			
		}
		else
		{
			$this->connection = $this->openConnection(); //Open a new connection to the twitter API
			
			if($this->connection)
			{
				$API_response = $this->connection->get("https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=".$this->username."&count=".$this->tweetsLimit."&include_rts=".$this->retweets."&exclude_replies=".$this->replies); //Get tweets from the API
				
				if(count($API_response) > 0) //Check if we have loaded at least 1 tweet (This is an attempt to find out if an error is happened)
				{
					$this->formatTweets($API_response);
					$this->setOutput();
					if($this->useCache) //If useCache is enabled we will cache this API response
					{
						$this->cacheGenerate();
					}
					return $this->feed; //This contains all your tweets in 	the desired format
				}
				return false;
			}
			return false;
		}
	}
}

?>